plugins {
	id 'org.quiltmc.loom' version '0.12.+'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.+'
	id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${artifact_id}-quilt-${minecraft_version}"

repositories {
	maven {
		name 'Quilt (Snapshot)'
		url 'https://maven.quiltmc.org/repository/snapshot/'
		content {
			includeGroup 'org.quiltmc.fabric_api_qsl'
			includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
		}
	}

	maven { url 'https://maven.wispforest.io' }
}

dependencies {

	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
	}
	modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"

	modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}+${minecraft_version}")

	implementation project(":Common")

	compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
	annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

	// Compat
	modCompileOnly "io.wispforest:owo-lib:${project.owo_version}"
}

loom {
	runs {
		client {
			client()
			setConfigName("Quilt Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Quilt Server")
			ideConfigGenerated(true)
			runDir("run")
		}
	}

	mixin {
		defaultRefmapName = "dynamic_asset_generator.refmap.json"
	}
}

processResources {
    from project(":Common").sourceSets.main.resources
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
	from project(":Common").sourceSets.main.allSource
}

javadocJar {
	from project(":Common").sourceSets.main.allJava
}

jar {
	from("LICENSE") {
		rename { "${it}_${mod_name}"}
	}
}

tasks.jar.finalizedBy(tasks.remapJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
    }
}

// Publishing

if (project.hasProperty("curseforge_key")) {
	curseforge {
		apiKey = project.curseforge_key
		project {
			id = '577096'
			changelog = modGitPublisher.changelog
			releaseType = "${project.release_type}"
			addGameVersion "${project.minecraft_version}"
			addGameVersion 'Quilt'
			mainArtifact(remapJar) {
				displayName = "Dynamic Asset Generator [Quilt] v$project.version"
			}
			relations {
				requiredDependency 'qsl'
			}
		}
		options {
			forgeGradleIntegration = true
		}
	}
}

if (project.hasProperty("modrinth_key")) {
	modrinth {
		token = project.modrinth_key
		projectId = '83pFEQVb'
		versionNumber = "$project.version"
		versionType = "${project.release_type}"
		detectLoaders = false
		changelog = modGitPublisher.changelog
		uploadFile = remapJar
		gameVersions = ["${project.minecraft_version}"]
		loaders = ['quilt']
		dependencies {
			required.project 'qsl'
		}
	}
}
