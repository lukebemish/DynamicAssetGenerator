"use strict";(self.webpackChunkdynamic_asset_generator_wiki=self.webpackChunkdynamic_asset_generator_wiki||[]).push([[32],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6332:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},i="Color Source",c={unversionedId:"json/texsources/color",id:"json/texsources/color",title:"Color Source",description:"Source Type IDcolor",source:"@site/docs/json/texsources/color.md",sourceDirName:"json/texsources",slug:"/json/texsources/color",permalink:"/DynamicAssetGenerator/json/texsources/color",draft:!1,editUrl:"https://github.com/lukebemishprojects/DynamicAssetGenerator/tree/docs/docs/json/texsources/color.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multiply Mask Source",permalink:"/DynamicAssetGenerator/json/texsources/masks/multiply"},next:{title:"Crop Source",permalink:"/DynamicAssetGenerator/json/texsources/crop"}},s={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"color-source"},"Color Source"),(0,o.kt)("p",null,"Source Type ID: ",(0,o.kt)("inlineCode",{parentName:"p"},"dynamic_asset_generator:color")),(0,o.kt)("p",null,"Format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "dynamic_asset_generator:color",\n    "color": [\n        "0xAAAAFF",\n        "0xFFAAAA"\n    ],\n    "encoding": "RGB" // optional, defaults to ARGB\n}\n')),(0,o.kt)("p",null,"Forms a square image containing all the colors listed in ",(0,o.kt)("inlineCode",{parentName:"p"},"color"),", encoded as the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"encoding"),". The colors may be provided as integers (",(0,o.kt)("inlineCode",{parentName:"p"},"11184895"),") or as strings (",(0,o.kt)("inlineCode",{parentName:"p"},'"0xAAAAFF"'),"). The output texture will be square, with the width being the smallest power of two that can fit all the colors. The ",(0,o.kt)("inlineCode",{parentName:"p"},"encoding")," may be one of ",(0,o.kt)("inlineCode",{parentName:"p"},"RGB"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ARGB"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ABGR"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"BGR"),"; if ",(0,o.kt)("inlineCode",{parentName:"p"},"RGB")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"BGR"),", the alpha channel is assumed to be opaque."))}m.isMDXComponent=!0}}]);