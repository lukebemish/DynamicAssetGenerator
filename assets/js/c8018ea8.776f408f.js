"use strict";(self.webpackChunkdynamic_asset_generator_wiki=self.webpackChunkdynamic_asset_generator_wiki||[]).push([[915],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={},i="Channel Route Source",l={unversionedId:"json/texsources/channel_route",id:"json/texsources/channel_route",title:"Channel Route Source",description:"Source Type IDchannel_route",source:"@site/docs/json/texsources/channel_route.md",sourceDirName:"json/texsources",slug:"/json/texsources/channel_route",permalink:"/DynamicAssetGenerator/json/texsources/channel_route",draft:!1,editUrl:"https://github.com/lukebemishprojects/DynamicAssetGenerator/tree/docs/docs/json/texsources/channel_route.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multiply Mask Source",permalink:"/DynamicAssetGenerator/json/texsources/masks/multiply"},next:{title:"Color Source",permalink:"/DynamicAssetGenerator/json/texsources/color"}},s={},c=[],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"channel-route-source"},"Channel Route Source"),(0,o.kt)("p",null,"Source Type ID: ",(0,o.kt)("inlineCode",{parentName:"p"},"dynamic_asset_generator:channel_route")),(0,o.kt)("p",null,"Format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "dynamic_asset_generator:channel_route",\n    "sources": {\n        "source": {   },\n        "another_source": {   },\n        "...": {   },\n    },\n    "red": {\n        "source": "another_source",\n        "channel": "red"\n    }, // optional\n    "green": {   }, // optional\n    "blue": {   }, // optional\n    "alpha": {   } // optional\n}\n')),(0,o.kt)("p",null,"This source routes channels from provided inputs to the channels of an output image. The ",(0,o.kt)("inlineCode",{parentName:"p"},"sources")," field takes a map of identifier\nnames to texture sources; the fields for each channel (",(0,o.kt)("inlineCode",{parentName:"p"},"red"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"green"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"blue"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"alpha"),") refer to these provided sources, and\nspecify a channel (",(0,o.kt)("inlineCode",{parentName:"p"},"red"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"green"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"blue"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"alpha"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"cielab_lightness"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"cielab_a"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"cielab_b"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"hsl_hue"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"hsl_lightness"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"hsl_saturation"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"hsv_hue"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"hsv_value"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"hsv_saturation"),") to use for the given channel; if a channel is not provided, it is assumed to always be 0 (",(0,o.kt)("inlineCode",{parentName:"p"},"red"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"green"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"blue"),")\nor 255 (",(0,o.kt)("inlineCode",{parentName:"p"},"alpha"),")."))}d.isMDXComponent=!0}}]);