"use strict";(self.webpackChunkdynamic_asset_generator_wiki=self.webpackChunkdynamic_asset_generator_wiki||[]).push([[896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2894:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={},s="Edge Mask Source",i={unversionedId:"json/texsources/masks/edge",id:"json/texsources/masks/edge",title:"Edge Mask Source",description:"Source Type IDmask/edge",source:"@site/docs/json/texsources/masks/edge.md",sourceDirName:"json/texsources/masks",slug:"/json/texsources/masks/edge",permalink:"/DynamicAssetGenerator/json/texsources/masks/edge",draft:!1,editUrl:"https://github.com/lukebemish/DynamicAssetGenerator/tree/docs/docs/json/texsources/masks/edge.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cutoff Mask Source",permalink:"/DynamicAssetGenerator/json/texsources/masks/cutoff"},next:{title:"Grow Mask Source",permalink:"/DynamicAssetGenerator/json/texsources/masks/grow"}},c={},u=[],l={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"edge-mask-source"},"Edge Mask Source"),(0,o.kt)("p",null,"Source Type ID: ",(0,o.kt)("inlineCode",{parentName:"p"},"dynamic_asset_generator:mask/edge")),(0,o.kt)("p",null,"Format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "dynamic_asset_generator:mask/edge",\n    "source": {   },\n    "count_outside_frame": false, // optional, defaults to false\n    "edges": [\n        "north",\n        "northeast",\n        "east",\n        "southeast",\n        "south",\n        "southwest",\n        "west",\n        "northwest"\n    ], // optional, defaults to all directions\n    "cutoff": 128, // optional, defaults to 128\n}\n')),(0,o.kt)("p",null,"Generates a mask which is solid everywhere the provided source has an edge, and transparent otherwise. The ",(0,o.kt)("inlineCode",{parentName:"p"},"edges")," may be any subset of ",(0,o.kt)("inlineCode",{parentName:"p"},"north"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"northeast"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"east"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"southeast"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"south"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"southwest"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"west"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"northwest"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"cutoff")," must be an integer between 0 and 255, inclusive. A pixel is considered to be an edge if it's alpha is greater than or equal to the cutoff and at least one of its neighbors, in the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"edges"),", is less than the cutoff. If ",(0,o.kt)("inlineCode",{parentName:"p"},"count_outside_frame")," is true, then pixels outside the frame are considered to always be less than the cutoff."))}d.isMDXComponent=!0}}]);