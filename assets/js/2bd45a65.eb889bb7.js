"use strict";(self.webpackChunkdynamic_asset_generator_wiki=self.webpackChunkdynamic_asset_generator_wiki||[]).push([[892],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="Crop Source",s={unversionedId:"json/texsources/crop",id:"json/texsources/crop",title:"Crop Source",description:"Source Type IDcrop",source:"@site/docs/json/texsources/crop.md",sourceDirName:"json/texsources",slug:"/json/texsources/crop",permalink:"/DynamicAssetGenerator/json/texsources/crop",draft:!1,editUrl:"https://github.com/lukebemish/DynamicAssetGenerator/tree/docs/docs/json/texsources/crop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Combined Paletted Image Source",permalink:"/DynamicAssetGenerator/json/texsources/combined-paletted-image"},next:{title:"Fallback Source",permalink:"/DynamicAssetGenerator/json/texsources/fallback"}},p={},l=[],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"crop-source"},"Crop Source"),(0,a.kt)("p",null,"Source Type ID: ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic_asset_generator:crop")),(0,a.kt)("p",null,"Format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "dynamic_asset_generator:crop",\n    "input": {   },\n    "total_size": 16,\n    "start_x": 0,\n    "start_y": 0,\n    "size_x": 8,\n    "size_y": 8\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"input")," a texture source used as an input."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"total_size")," is the expected width of the entire original image. This is used for scaling, and consistency across different resolution resource packs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_x")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"start_y")," are the starting x and y pixels for the output image, counting from the top left. These can be negative."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size_x")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"size_y")," are the dimensions of the output image in the x and y directions.")),(0,a.kt)("p",null,"All the start and size parameters are relative to the ",(0,a.kt)("inlineCode",{parentName:"p"},"total_width"),". In other words, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"total_width")," is the same as the width of the input image, then the output will be ",(0,a.kt)("inlineCode",{parentName:"p"},"size_x")," by ",(0,a.kt)("inlineCode",{parentName:"p"},"size_y"),", starting at ",(0,a.kt)("inlineCode",{parentName:"p"},"start_x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"start_y"),"; if the image is twice the ",(0,a.kt)("inlineCode",{parentName:"p"},"total_width"),", then the output will be ",(0,a.kt)("inlineCode",{parentName:"p"},"2*size_x")," by ",(0,a.kt)("inlineCode",{parentName:"p"},"2_size_y"),", starting at ",(0,a.kt)("inlineCode",{parentName:"p"},"2*start_x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"2*start_y"),"; etc."))}m.isMDXComponent=!0}}]);