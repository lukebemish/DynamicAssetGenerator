"use strict";(self.webpackChunkdynamic_asset_generator_wiki=self.webpackChunkdynamic_asset_generator_wiki||[]).push([[428],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="General Concepts",s={unversionedId:"java/concepts",id:"java/concepts",title:"General Concepts",description:"Resources and data are provided through a ResourceCache; DynAssetGen has built in implementations of ResourceCache for",source:"@site/docs/java/concepts.mdx",sourceDirName:"java",slug:"/java/concepts",permalink:"/DynamicAssetGenerator/java/concepts",draft:!1,editUrl:"https://github.com/lukebemishprojects/DynamicAssetGenerator/tree/docs/docs/java/concepts.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Java API",permalink:"/DynamicAssetGenerator/java/category"},next:{title:"Texture Generation",permalink:"/DynamicAssetGenerator/java/textures"}},c={},l=[],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"general-concepts"},"General Concepts"),(0,a.kt)("p",null,"Resources and data are provided through a ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourceCache"),"; DynAssetGen has built in implementations of ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourceCache")," for\ngenerating assets and data. Resource caches have an identifier associated with them, and can be registered with ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourceCache.register"),". For instance, to register a data cache:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static final DataResourceCache DATA_CACHE =\n    ResourceCache.register(new DataResourceCache(new ResourceLocation("my_mod", "data")));\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AssetResourceCache")," is a similar built-in implementation for client resources."),(0,a.kt)("p",null,"Resource generation is structured around several core concepts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ResourceGenerationContext"),", an object which holds information about the current resource generation environment, including\na ",(0,a.kt)("inlineCode",{parentName:"li"},"ResourceSource")," which can be used to access existing resources."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"InputStreamSource"),", an object which can take a target file resource location and a generation context, and supplies an\n",(0,a.kt)("inlineCode",{parentName:"li"},"IoSupplier<InputStream>")," which can be used to read the resource data, or ",(0,a.kt)("inlineCode",{parentName:"li"},"null")," if no resource should be supplied."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PathAwareInputStreamSource"),", a ",(0,a.kt)("inlineCode",{parentName:"li"},"InputStreamSource")," which is aware of which locations it can provide data for."),(0,a.kt)("li",{parentName:"ul"},"Reset listeners, callbacks which are invoked when a resource cache is reset. These should be used to invalidate any sort of\ncaching.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"InputStreamSource")," also has a default method, ",(0,a.kt)("inlineCode",{parentName:"p"},"createCacheKey"),', which can be overridden to provide a "key" for the generated\nresource. Between resource pack reloads or game restarts, if this key has not changed for a resource at a given location, then\nthe existing, cached location will be used. Thus, this key should include all information needed to specify the resource; for\ntexture sources, for instance, the implementation of this key contains both the serialized texture source generator, as well\nas hashed versions of any images that the texture source reads.'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ResourceCache"),' contains a number of methods for adding input stream sources; these methods all\ninternally delegate to the "lazy" method which accepts a ',(0,a.kt)("inlineCode",{parentName:"p"},"Supplier<? extends PathAwareInputStreamSource>")," and does not\nevaluate it until resources are requested from the cache. This means that a ",(0,a.kt)("inlineCode",{parentName:"p"},"PathAwareInputStreamSource")," can safely access\nexisting resources or data both when generating resources and when determining which resources it can provide."),(0,a.kt)("p",null,"Resources and data from other sources (the base game, resource packs, other mods, etc.) can be accessed through the provided\n",(0,a.kt)("inlineCode",{parentName:"p"},"ResourceGenerationContext"),"; by default, this will not contain resources from other packs added by DynAssetGen. To access\nthese, provide their names in ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourceCache#getDependencies"),"."))}d.isMDXComponent=!0}}]);