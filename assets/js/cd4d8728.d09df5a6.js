"use strict";(self.webpackChunkdynamic_asset_generator_wiki=self.webpackChunkdynamic_asset_generator_wiki||[]).push([[857],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="Animation Splitter",s={unversionedId:"json/texsources/splitter",id:"json/texsources/splitter",title:"Animation Splitter",description:"Source Type IDanimationsplitter and dynamicassetgenerator:framecapture",source:"@site/docs/json/texsources/splitter.md",sourceDirName:"json/texsources",slug:"/json/texsources/splitter",permalink:"/DynamicAssetGenerator/json/texsources/splitter",draft:!1,editUrl:"https://github.com/lukebemish/DynamicAssetGenerator/tree/docs/docs/json/texsources/splitter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Shadowed Source",permalink:"/DynamicAssetGenerator/json/texsources/shadowed"},next:{title:"Transform Source",permalink:"/DynamicAssetGenerator/json/texsources/transform"}},c={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"animation-splitter"},"Animation Splitter"),(0,a.kt)("p",null,"Source Type ID: ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic_asset_generator:animation_splitter")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic_asset_generator:frame_capture")),(0,a.kt)("p",null,"Format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type" : "dynamic_asset_generator:animation_splitter",\n    "sources" : {\n        "name1" : {\n            "source" : {   },\n            "scale" : 1\n        },\n        "name2" : {\n            "source" : {   },\n            "scale" : 3\n        }\n    },\n    "generator" : {\n        ...\n        {\n            "type" : "dynamic_asset_generator:frame_capture",\n            "capture" : "name1"\n        }\n        ...\n    }\n}\n')),(0,a.kt)("p",null,"This source allows animation images to be split up and processed frame-by-frame. A list of ",(0,a.kt)("inlineCode",{parentName:"p"},"sources")," is specified; each of these is broken up into square frames; in the final animation, each source's original frame will correspond to ",(0,a.kt)("inlineCode",{parentName:"p"},"scale")," frames in a row in the output. The total length of the output animation will be the least common multiple of the lengths of the input animation multiplied by their scales. The ",(0,a.kt)("inlineCode",{parentName:"p"},"generator")," is calculated for each frame of the output animation; inside of this texture source, any other texture source can be used, in addition to the special ",(0,a.kt)("inlineCode",{parentName:"p"},"frame_capture")," source, which is given a source name and captures a single frame of that source at a time."))}m.isMDXComponent=!0}}]);