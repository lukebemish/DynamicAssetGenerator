plugins {
    alias libs.plugins.forgegradle
    alias libs.plugins.librarian
    alias libs.plugins.mixingradle
    alias libs.plugins.minotaur
    alias libs.plugins.cursegradle
}

apply plugin: 'java'
apply plugin: 'maven-publish'

archivesBaseName = "${artifact_id}-forge-${libs.versions.minecraft.get()}"

minecraft {
    mappings channel: 'parchment', version: "${libs.versions.parchment.minecraft.get()}-${libs.versions.parchment.mappings.get()}-${libs.versions.minecraft.get()}"

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'dynamicassetgenerator.test', 'true'
            property 'dynamicassetgenerator.time_resources', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'dynamicassetgenerator.test', 'true'
            property 'dynamicassetgenerator.time_resources', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileClasspath.extendsFrom(compileClasspath)
}

dependencies {
    minecraft libs.forge
    compileOnly project(":Common")

    compileOnly libs.autoservice
    annotationProcessor libs.autoservice

    annotationProcessor "org.spongepowered:mixin:${libs.versions.mixin.get()}:processor"
}

mixin {
    add project(":Common").sourceSets.main, "dynamic_asset_generator.refmap.json"
    config 'mixin.dynamic_asset_generator.json'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

sourcesJar {
    from project(":Common").sourceSets.main.allSource
}

javadocJar {
    from project(":Common").sourceSets.main.allJava
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
    }
}

// Publishing

if (System.getenv('CURSEFORGE_KEY')) {
    curseforge {
        apiKey = System.getenv('CURSEFORGE_KEY')
        project {
            id = '577096'
            releaseType = "${project.release_type}"
            addGameVersion "${libs.versions.minecraft.get()}"
            addGameVersion 'Forge'
            mainArtifact(jar) {
                displayName = "Dynamic Asset Generator [Forge] v$project.version"
            }
        }
        options {
            forgeGradleIntegration = true
        }
    }
}

if (System.getenv('MODRINTH_KEY')) {
    modrinth {
        token = System.getenv('MODRINTH_KEY')
        projectId = '83pFEQVb'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        uploadFile = jar
        gameVersions = ["${libs.versions.minecraft.get()}"]
        loaders = ['forge']
    }
}
