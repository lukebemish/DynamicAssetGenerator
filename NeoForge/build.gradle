plugins {
    alias libs.plugins.neogradle
    alias libs.plugins.librarian
    alias libs.plugins.mixingradle
    alias libs.plugins.minotaur
    alias libs.plugins.curseforgegradle
}

apply plugin: 'java'
apply plugin: 'maven-publish'

minecraft {
    mappings channel: 'parchment', version: "${libs.versions.parchment.minecraft.get()}-${libs.versions.parchment.mappings.get()}-${libs.versions.minecraft.get()}"

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'dynamicassetgenerator.test', 'true'
            property 'dynamicassetgenerator.time_resources', 'true'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'dynamicassetgenerator.test', 'true'
            property 'dynamicassetgenerator.time_resources', 'true'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

configurations {
    testCompileClasspath.extendsFrom(compileClasspath)
}

dependencies {
    minecraft libs.neoforge
    compileOnly project(":Common")

    compileOnly libs.autoservice
    annotationProcessor libs.autoservice

    annotationProcessor(variantOf(libs.mixin) { classifier 'processor' })
}

mixin {
    add project(":Common").sourceSets.main, "dynamic_asset_generator.refmap.json"
    config 'mixin.dynamic_asset_generator.json'
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

sourcesJar {
    from project(":Common").sourceSets.main.allSource
}

javadocJar {
    from project(":Common").sourceSets.main.allJava
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            artifactId base.archivesName.get()
        }
    }
    repositories {
    }
}

// Publishing

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (System.getenv('CURSEFORGE_KEY')) {
    tasks.register('curseforge', TaskPublishCurseForge) {
        disableVersionDetection()
        apiToken = System.getenv('CURSEFORGE_KEY')
        def projectId = '577096'
        def mainFile = upload(projectId, tasks.reobfJar)
        mainFile.displayName = "Dynamic Asset Generator [NeoForge] v$project.version"
        mainFile.releaseType = "${project.release_type}"
        mainFile.addModLoader('NeoForge')
        mainFile.addGameVersion("${libs.versions.minecraft.get()}")
        mainFile.changelog = ''
    }

    afterEvaluate {
        tasks.curseforge.dependsOn tasks.reobfJar
    }
}

if (System.getenv('MODRINTH_KEY')) {
    modrinth {
        token = System.getenv('MODRINTH_KEY')
        projectId = '83pFEQVb'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        uploadFile = jar
        gameVersions = ["${libs.versions.minecraft.get()}"]
        loaders = ['neoforge']
    }
}
